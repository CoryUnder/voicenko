import os
import logging
import tempfile

import httpx
import ffmpeg

from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler
from openai import OpenAI

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = "https://worker-production-b2dd.up.railway.app"

client = OpenAI(api_key=OPENAI_API_KEY)

# –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî —è —Ä–æ–∑–ø—ñ–∑–Ω–∞—é –π–æ–≥–æ —Ç–µ–∫—Å—Ç.\n\n"
        "üéô –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –∫–æ—Ä–æ—Ç–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–æ 1 —Ö–≤).\n"
        "‚ùó –Ø–∫—â–æ –±—É–¥–µ –ø–æ–º–∏–ª–∫–∞ ‚Äî —è —Å–∫–∞–∂—É."
    )

# –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–æ –±–æ—Ç –ø—Ä–∞—Ü—é—î
    await update.message.reply_text("üîÑ –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        voice = update.message.voice
        file = await context.bot.get_file(voice.file_id)

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è .ogg —Ñ–∞–π–ª—É
        with tempfile.TemporaryDirectory() as tmp_dir:
            ogg_path = os.path.join(tmp_dir, "audio.ogg")
            mp3_path = os.path.join(tmp_dir, "audio.mp3")

            await file.download_to_drive(ogg_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ mp3
            ffmpeg.input(ogg_path).output(mp3_path).run(overwrite_output=True)

            # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É –¥–ª—è OpenAI
            with open(mp3_path, "rb") as audio_file:
                transcription = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file
                )

            text = transcription.text.strip()
            if text:
                await update.message.reply_text(f"üìù –û—Å—å –≤–∞—à —Ç–µ–∫—Å—Ç:\n\n{text}")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å—É:")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))

    # –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        webhook_url=f"{WEBHOOK_URL}/"
    )
