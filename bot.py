import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from openai import OpenAI
from pydub import AudioSegment
import uuid

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# FFmpeg —à–ª—è—Ö (–¥–ª—è Render/—Ö–æ—Å—Ç–∏–Ω–≥—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
AudioSegment.converter = "ffmpeg"  # –∞–±–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö, —è–∫—â–æ –ª–æ–∫–∞–ª—å–Ω–æ

# –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = await context.bot.get_file(update.message.voice.file_id)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
    ogg_path = f"{uuid.uuid4()}.ogg"
    wav_path = f"{uuid.uuid4()}.wav"
    await file.download_to_drive(ogg_path)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è .ogg ‚Üí .wav
    sound = AudioSegment.from_file(ogg_path)
    sound.export(wav_path, format="wav")

    # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ OpenAI Whisper
    with open(wav_path, "rb") as audio_file:
        transcript = client.audio.transcriptions.create(
            model="whisper-1",
            file=audio_file
        )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
    await update.message.reply_text(f"üìù –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:\n{transcript.text}")

    # –û—á–∏—â–µ–Ω–Ω—è
    os.remove(ogg_path)
    os.remove(wav_path)

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.run_polling()

if __name__ == "__main__":
    main()
