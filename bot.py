import os
import logging
import subprocess
import time

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI, OpenAIError

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è —Ä–æ–∑–ø—ñ–∑–Ω–∞—é –π–æ–≥–æ –≤ —Ç–µ–∫—Å—Ç.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –¶–µ–π –±–æ—Ç –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –∑ –≥–æ–ª–æ—Å–æ–≤–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ!")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        file = await context.bot.get_file(update.message.voice.file_id)
        ogg_path = "voice.ogg"
        mp3_path = "voice.mp3"
        await file.download_to_drive(ogg_path)

        await update.message.reply_text("üß† –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å...")

        # –ü—Ä–µ–ª–æ–∞–¥–µ—Ä (—ñ–º—ñ—Ç–∞—Ü—ñ—è)
        for i in range(0, 101, 25):
            await update.message.reply_text(f"‚è≥ –†–æ–∑–ø—ñ–∑–Ω–∞—é... {i}%")
            time.sleep(0.4)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ mp3
        subprocess.run([
            "ffmpeg", "-i", ogg_path, mp3_path, "-y"
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        with open(mp3_path, "rb") as audio_file:
            transcription = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="text",
            )

        await update.message.reply_text(f"‚úÖ –û—Å—å –≤–∞—à —Ç–µ–∫—Å—Ç:\n\n{transcription}")

    except OpenAIError as e:
        logger.error("OpenAI error: %s", e)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ OpenAI: –π–º–æ–≤—ñ—Ä–Ω–æ, –≤–∏—á–µ—Ä–ø–∞–Ω–æ –ª—ñ–º—ñ—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as e:
        logger.error("–Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.TEXT, handle_text))

    app.run_webhook(
        listen="0.0.0.0",
        port=8000,
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
