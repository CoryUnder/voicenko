import os
import logging
import tempfile
import requests

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
DEEPGRAM_API_KEY = os.getenv("STT_API_KEY")  # –∫–ª—é—á Deepgram

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ—Ç–≤–æ—Ä—é –π–æ–≥–æ –Ω–∞ —Ç–µ–∫—Å—Ç.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úçÔ∏è –¢—É—Ç –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ù–∞–¥—ñ—à–ª–∏ voice.")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice = update.message.voice
    file = await context.bot.get_file(voice.file_id)

    await update.message.reply_text("üéôÔ∏è –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑–∞—á–µ–∫–∞–π...")

    with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as f:
        await file.download_to_drive(f.name)
        audio_path = f.name

    try:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–∞–π–ª —É Deepgram
        with open(audio_path, "rb") as audio_file:
            response = requests.post(
                "https://api.deepgram.com/v1/listen",
                headers={
                    "Authorization": f"Token {DEEPGRAM_API_KEY}",
                    "Content-Type": "audio/ogg"
                },
                data=audio_file
            )

        if response.status_code == 200:
            data = response.json()
            text = data.get("results", {}).get("channels", [{}])[0].get("alternatives", [{}])[0].get("transcript", "")
            if text:
                await update.message.reply_text("üìù –û—Å—å –≤–∞—à —Ç–µ–∫—Å—Ç:\n\n" + text)
            else:
                await update.message.reply_text("ü§î –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç.")
        else:
            logger.error(f"Deepgram error: {response.status_code} - {response.text}")
            await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞—É–¥—ñ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å—É:")
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
