import os
import logging
import tempfile
import asyncio
import aiohttp

from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters, CommandHandler

BOT_TOKEN = os.getenv("BOT_TOKEN")
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "https://worker-production-xxxx.up.railway.app"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === START MESSAGE ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ä–æ–∑–ø—ñ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üéôÔ∏è.\n\n"
        "üì§ –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ ‚Äî —è —Ä–æ–∑—à–∏—Ñ—Ä—É—é –π–æ–≥–æ –≤ —Ç–µ–∫—Å—Ç!\n\n"
        "‚ùå –¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è."
    )

# === TEXT MESSAGE ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ù–∞–¥—ñ—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞ –Ω–µ —Ç–µ–∫—Å—Ç üôÉ")

# === VOICE MESSAGE ===
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        voice = update.message.voice
        file = await context.bot.get_file(voice.file_id)

        # –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .oga —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".oga") as temp_ogg:
            await file.download_to_drive(custom_path=temp_ogg.name)
            ogg_path = temp_ogg.name

        await update.message.reply_text("‚è≥ –†–æ–∑–ø—ñ–∑–Ω–∞—é –≥–æ–ª–æ—Å... [0%]")

        # —á–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –¥–æ Deepgram
        with open(ogg_path, "rb") as audio_file:
            headers = {
                "Authorization": f"Token {DEEPGRAM_API_KEY}"
            }
            params = {
                "punctuate": "true",
                "language": "uk"
            }
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://api.deepgram.com/v1/listen",
                    headers=headers,
                    params=params,
                    data=audio_file
                ) as response:
                    if response.status != 200:
                        error_json = await response.text()
                        logger.error(f"Deepgram error: {response.status} - {error_json}")
                        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
                        return

                    data = await response.json()

        text = data.get("results", {}).get("channels", [{}])[0].get("alternatives", [{}])[0].get("transcript", "")
        if text:
            await update.message.reply_text(f"‚úÖ –û—Å—å –≤–∞—à —Ç–µ–∫—Å—Ç:\n\n{text}")
        else:
            await update.message.reply_text("üòï –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")

    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å—É:")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ.")

# === MAIN ===
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # Webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
