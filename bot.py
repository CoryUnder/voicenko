import os
import logging
import tempfile
import ffmpeg
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from openai import OpenAI, RateLimitError, AuthenticationError

BOT_TOKEN = os.environ.get("BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
DOMAIN = os.environ.get("DOMAIN")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 'https://worker-production-b2dd.up.railway.app'

client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    await message.reply_text("üéß –û—Ç—Ä–∏–º–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –û–±—Ä–æ–±–ª—è—é –π–æ–≥–æ...")

    try:
        file = await context.bot.get_file(message.voice.file_id)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".oga") as ogg_file:
            await file.download_to_drive(custom_path=ogg_file.name)
            ogg_path = ogg_file.name

        mp3_path = ogg_path.replace(".oga", ".mp3")

        for i in range(1, 11):
            await message.reply_text(f"üîÑ –û–±—Ä–æ–±–∫–∞ {i * 10}%")

        ffmpeg.input(ogg_path).output(mp3_path).run(overwrite_output=True)

        with open(mp3_path, "rb") as audio_file:
            transcription = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file
            )

        text = transcription.text
        await message.reply_text(f"üìÑ –û—Å—å –≤–∞—à —Ç–µ–∫—Å—Ç:\n{text}")

    except RateLimitError:
        await message.reply_text("‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç OpenAI. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±–∞–ª–∞–Ω—Å.")
    except AuthenticationError:
        await message.reply_text("‚ùå API –∫–ª—é—á OpenAI –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.")
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å—É:", exc_info=e)
        await message.reply_text("‚ùóÔ∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—ñ –≥–æ–ª–æ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –ù–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ *–≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è*, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.", parse_mode="Markdown")

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        webhook_url=f"{DOMAIN}/webhook"
    )
