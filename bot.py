import os
import subprocess
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI
import uuid

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://your-railway-url.up.railway.app

client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ voice, —ñ —è –Ω–∞–¥—ñ—à–ª—é —Ç–µ–∫—Å—Ç!"
    )

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –Ø –ø—Ä–∞—Ü—é—é —Ç—ñ–ª—å–∫–∏ –∑ voice/audio.")

# –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("üéß –û–±—Ä–æ–±–ª—è—é –∞—É–¥—ñ–æ‚Ä¶ (0%)")

        file = await context.bot.get_file(update.message.voice.file_id)
        ogg_path = f"voice_{uuid.uuid4().hex}.oga"
        mp3_path = ogg_path.replace(".oga", ".mp3")
        await file.download_to_drive(ogg_path)

        await update.message.reply_text("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ MP3‚Ä¶ (33%)")
        subprocess.run(["ffmpeg", "-i", ogg_path, mp3_path], check=True)

        await update.message.reply_text("üß† –ù–∞–¥—Å–∏–ª–∞—é –Ω–∞ OpenAI‚Ä¶ (66%)")
        with open(mp3_path, "rb") as audio_file:
            transcription = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file
            )

        await update.message.reply_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Å—å –≤–∞—à —Ç–µ–∫—Å—Ç:\n\n{transcription.text}")

    except Exception as e:
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å—É:", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏. –ú–æ–∂–ª–∏–≤–æ, –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç OpenAI –∞–±–æ —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ.")
    finally:
        # –û—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        if os.path.exists(ogg_path): os.remove(ogg_path)
        if os.path.exists(mp3_path): os.remove(mp3_path)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # –ó–∞–ø—É—Å–∫ —è–∫ –≤–µ–±—Ö—É–∫
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8080)),
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
